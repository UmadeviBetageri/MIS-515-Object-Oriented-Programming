# -*- coding: utf-8 -*-
"""MIS515_homework4_part_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NVY_GBQ2nuWO0V669N-tixb5rOuq-tcS
"""

## PART - 1 ##
# This program builds a decision tree machine learning model to classify crowdfunding posts based on the dataset taken from Kiva.com.

# Importing required libraries
import google.colab.files
import joblib
import json
import matplotlib.pyplot as plt
import requests
import sklearn.metrics as sk_m
import sklearn.model_selection as sk_ms
import sklearn.tree as sk_t

# URL to load the dataset
kiva_data = "https://dgoldberg.sdsu.edu/515/kiva_data_full.json"

response = requests.get(kiva_data)

# Checks if the url is connected successfully
if response:
    data = json.loads(response.text) # loading data

    # Empty lists to store the response and predictore variables
    x = []
    y = []

    # Extracting response and predictore variables from json file
    for line in data:
        length = line["length"]
        number_of_pictures = line["number_of_pictures"]
        loan_amount = line["loan_amount"]
        bonus_credit_eligibility = line["bonus_credit_eligibility"]
        user_favorite_post = line["user_favorite_post"]
        loan_status = line["loan_status"]

        # Conversion of string to numerical values
        if bonus_credit_eligibility == "yes":
            bonus_credit_eligibility = 1
        else:
            bonus_credit_eligibility = 0

        if user_favorite_post == "yes":
            user_favorite_post = 1
        else:
            user_favorite_post = 0

        if loan_status == "funded":
            loan_status = 1
        else:
            loan_status = 0

        inner_list = [length, number_of_pictures, loan_amount, bonus_credit_eligibility, user_favorite_post]

        # appends values of variables to empty lists
        x.append(inner_list)
        y.append(loan_status)

    # Splits the data into traing (80%) and testing (20%). 
    x_train, x_test, y_train, y_test = sk_ms.train_test_split(x, y, test_size = 0.20, random_state = 1)

    # Builds a classifification model on training data set.
    clf = sk_t.DecisionTreeClassifier()
    clf = clf.fit(x_train, y_train)

    # Predict the response for testing data.
    predictions = clf.predict(x_test)

    # Computes the accuracy rate for the decision tree.
    accuracy = sk_m.accuracy_score(y_test, predictions)

    # Prints accuracy score.
    print("Accuracy: ", accuracy)
    print()

    # Computes confusion matrix.
    confusion_matrix = sk_m.confusion_matrix(y_test, predictions)
    cm_display = sk_m.ConfusionMatrixDisplay(confusion_matrix)

    cm_display.plot()
    plt.show()

    # This saves the model for future use.
    joblib.dump(clf, "kiva_decision_tree.joblib")
    google.colab.files.download("kiva_decision_tree.joblib")

    print()
    print("Decision tree model saved to kiva_decision_tree.joblib.")

# prints a message if some connection issue occurs.
else:
    print("Sorry, connection error.")