# -*- coding: utf-8 -*-
"""Homework_3_MIS515_Umadevi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tng24Pj3D5SmptIiuVSefzXDRAxSb6Zu
"""

# This is a movie analytics tool, in which user can find the several information about the movie of the his/her choice.
# This program provides the different types of movies analysis such as background, reception, movie poster, reviews wordcloud and sentiment analysis.

!pip install xmltodict

# Importing required libraries.
import json, nltk, requests, skimage.io, textblob, xmltodict
import matplotlib.pyplot as plt
from wordcloud import WordCloud
nltk.download("punkt", quiet=True)
nltk.download("popular", quiet=True)

# OMDb API for finding background, reception and poster
# Key : 4eb69a22
base_url_OMDb = "https://www.omdbapi.com/?r=xml&apikey=4eb69a22&t="

# MIS 515 API for finding movie reviews
base_url_reviews = "https://dgoldberg.sdsu.edu/515/imdb/"


# The function background provides details of movie such as movie year, rating, runtime, genre, actors and summary
def background(movei_name):
    # OMDb API with movie name is used to find movie background
    full_url = base_url_OMDb + movei_name
    response = requests.get(full_url)

    # Checks if the url is connected successfully
    if response:
        data = xmltodict.parse(response.text) # loading data from API

        # Finding background information
        year = data["root"]["movie"]["@year"]
        rating = data["root"]["movie"]["@rated"]
        runtime = data["root"]["movie"]["@runtime"]
        genre = data["root"]["movie"]["@genre"]
        actors = data["root"]["movie"]["@actors"]
        plot = data["root"]["movie"]["@plot"]

        # Prints the gathered information
        print("Year: ", year)
        print("Rating: ", rating)
        print("Runtime: ", runtime)
        print("Genre: ", genre)
        print("Actors: ", actors)
        print("Plot: ", plot)

    # prints a message if the API could not load any information
    else: 
        print("Sorry, the tool could not successfully load any background for this movie. \nPlease try another movie.")


# The function reception provides the details of movie’s awards, metascore, and IMDb rating
def reception(movei_name):
    # OMDb API with movie name is used to find movie reception
    full_url = base_url_OMDb + movei_name
    response = requests.get(full_url)

    # Checks if the url is connected successfully
    if response:
        data = xmltodict.parse(response.text) #loading data from API

        # Finding reception information
        awards = data["root"]["movie"]["@awards"]
        metascore = data["root"]["movie"]["@metascore"]
        imdb_rating = data["root"]["movie"]["@imdbRating"]

        # Prints the gathered information
        print("Awards: ", awards)
        print("Metascore: ", metascore)
        print("IMDb rating: ", imdb_rating)

    # prints a message if the API could not load any information
    else: 
        print("Sorry, the tool could not successfully load any reception for this movie. \nPlease try another movie.")


# The function poster provides the image of the movie’s poster
def poster(movei_name):
    # OMDb API with movie name is used to find movie poster
    full_url = base_url_OMDb + movei_name
    response = requests.get(full_url)

    # Checks if the url is connected successfully
    if response:
        data = xmltodict.parse(response.text) #loading data from API

        # Finding movie poster
        poster = data["root"]["movie"]["@poster"]

        if poster != "N/A":
            image = skimage.io.imread(poster)

            # Displays the image of movie poster
            plt.imshow(image, interpolation = "bilinear")
            plt.axis("off")
            plt.show(block = False)
            plt.pause(0.1)
            plt.close()
        
        else:
            print("Sorry, the tool could not successfully load any poster for this movie. \nPlease try another movie.")

    # prints a message if the API could not load any information
    else: 
        print("Sorry, the tool could not successfully load any poster for this movie. \nPlease try another movie.")


# The function wordcloud generates and shows a wordcloud based on downloaded IMDb reviews.
def wordcloud(movei_name):
    # MIS 515 API with movie name is used to find IMBb reviews
    full_url = base_url_reviews + movei_name + ".json"
    response = requests.get(full_url)

    # Checks if the url is connected successfully
    if response:
        data = json.loads(response.text) #loading data from API

        all_reviews = ""

        # Searching for IMDB reviews
        for line in data:
            review = line["Review text"]
            all_reviews = all_reviews + review + " "

        # Generating wordcloud 
        word_cloud = WordCloud(width = 2000, height = 2000, colormap="inferno")
        word_cloud.generate(all_reviews)
        
        plt.imshow(word_cloud, interpolation='bilinear')
        plt.axis("off")
        plt.show(block = False)
        plt.pause(0.1)
        plt.close()

    # prints a message if the API could not load any information
    else: 
        print("Sorry, the tool could not successfully load any IMDb reviews for this movie.\nPlease try another analysis or movie.")    
        

# The function sentiment provides average review polarity and subjectivity scores.
def sentiment(movei_name):
    # MIS 515 API with movie name is used to find IMBb reviews
    full_url = base_url_reviews + movei_name + ".json"
    response = requests.get(full_url)

    # Checks if the url is connected successfully
    if response:
        data = json.loads(response.text)

        polarity = []
        subjectivity = []

        # Searching for IMDB reviews and computing polarity and subjectivity for each review
        for review in data:
            blob = textblob.TextBlob(review["Review text"])
            pol = blob.polarity
            polarity.append(pol)

            sub = blob.subjectivity
            subjectivity.append(sub)

        # Finds average of polarity and subjectivity
        average_subjectivity = sum(subjectivity) / len(subjectivity)
        average_polarity = sum(polarity) / len(polarity)

        # Prints result
        print("Average IMDb review polarity: ", average_polarity)
        print("Average IMDb review subjectivity: ", average_subjectivity)

    # prints a message if the API could not load any information
    else: 
        print("Sorry, the tool could not successfully load any IMDb reviews for this movie.\nPlease try another analysis or movie.")  

## USER INTERACTIONS ##
# Welcome message
print()
print("Welcome to the movie analytics tool!")
print()

# Creata a while loop to allow the user to run as many analyses as desired.
repeat = "yes"

while repeat == "yes":
    # Asks user the movie name about which they would like find the information
    movei_name = (input("What movie would you like to analyze? ")).lower().strip()

    # Asks user to provide analysis type 
    information_type = (input("What would you like to see \n(background/reception/poster/wordcloud/sentiment)?")).lower().strip()
    information_type = (textblob.TextBlob(information_type)).correct()

    print()

    # Based on analysis type the program calls the perticular function to provide information about the movie.
    if information_type == "background":
        background(str(movei_name))
    elif information_type == "reception":
        reception(str(movei_name))
    elif information_type == "poster":
        poster(str(movei_name))
    elif information_type == "wordcloud":
        wordcloud(str(movei_name))
    elif information_type == "sentiment":
        sentiment(str(movei_name))
    
    # If the analysis type is not suppored by this program, then prints a messeage
    else:
        print("Sorry, that analysis is not supported. Please try again.")

    # Asks users if they would like to run another analysis
    print()
    repeat = (input("Would you like to run another analysis (yes/no)? ")).lower().strip()
    repeat = (textblob.TextBlob(repeat)).correct()

# Thanks message
print("Thanks for using movie analytics tool")