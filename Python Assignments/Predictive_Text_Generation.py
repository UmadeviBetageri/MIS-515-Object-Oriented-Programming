# -*- coding: utf-8 -*-
"""Homework_2_MIS515_Umadevi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ASIHKdKS4HSYmjmfZ-UXzaINxdneDFIZ
"""

# This program generates a predictive text-driven Haiku on a topic of the userâ€™s choice. 
# Haiku is a 3 lins, 7 words Japanese poem of seventeen syllables. 
# 1st line contain 2 words with 3 and 2 syllables respectively. 
# 2nd line contain 3 words with 3, 2 and 2 syllables respectively.
# 3rd line contain 2 words with 3 and 2 syllables respectively.
# It uses Datamuse API to find related words which satisfies the requirement of Haiku

# Importing related libraries.
import json, requests 

# Printing welcome message
print("Hello, welcome to the predictive text Haiku generator!")

# Defining API urls required for finding related triggers (rel_trg), left context(lc) and rhyming word(rhy)
base_url_rel_trg = "https://api.datamuse.com/words?md=s&rel_trg="
base_url_lc = "https://api.datamuse.com/words?md=s&lc="
base_url_rhy = "https://api.datamuse.com/words?md=s&lc="


## Defining a function with search word and number of syllables arguments for searching related triggers ##
def rel_trg(search_word, syllables):
    full_url = base_url_rel_trg + search_word

    response = requests.get(full_url)

    # Checks if the url is connected successfully
    if response:
        data = json.loads(response.text) # loading data
            
        # Creating an empty list for storing all words related to search word with required syllables
        rt_list = []
        # Searching for required word
        for rt in data:
            if rt['numSyllables'] == syllables:
                rt_list.append(rt['word'])

        # Checks if search found alteast one related word. If not, program prints a message.
        if len(rt_list) > 0:
            words.append(rt_list[0])
        else:
            print("Sorry, a valid Haiku could not be generated.")

    # prints an error message if the URL is not connected successfully
    else:
        print("Sorry, connection error.")


## Defining a function with search word and number of syllables arguments for searching left context ##
def left_context(search_word, syllables):
    full_url = base_url_lc + search_word

    response = requests.get(full_url)

    # Checks if the url is connected successfully
    if response:        
        data = json.loads(response.text)

        # Creating an empty list for storing all words related to search word with required syllables
        lc_list = []
        # Searching for required word
        for lc in data:
            if lc['numSyllables'] == syllables:
                lc_list.append(lc['word'])

        # Checks if search found alteast one related word. If not, program prints a message.
        if len(lc_list) > 0:
            words.append(lc_list[0])
        else:
            print("Sorry, a valid Haiku could not be generated.") 

    # prints an error message if the URL is not connected successfully
    else:
        print("Sorry, connection error.")

## Defining a function with search word and number of syllables arguments for searching rhyming words ##
def rhyming_word(search_word_lc, search_word_rhy, syllables):
    search_word = search_word_lc + "&rel_rhy=" + search_word_rhy 
    full_url = base_url_rhy + search_word

    response = requests.get(full_url)

    # Checks if the url is connected successfully
    if response:      
        data = json.loads(response.text)

        # Creating an empty list for storing all words related to search word with required syllables
        rhm_list = []
        # Searching for required word
        for rhm in data:
            if rhm['numSyllables'] == syllables:
                rhm_list.append(rhm['word']) 

        # Checks if search found alteast one related word. If not, program prints a message.
        if len(rhm_list) > 0:
            words.append(rhm_list[0])
        else:
            print("Sorry, a valid Haiku could not be generated.")

    # prints an error message if the URL is not connected successfully        
    else:
        print("Sorry, connection error.")


# While loop for repeated searches
repeat = "yes"

while repeat.lower().strip() == "yes":

    # Defining an empty list for storing all seven words of haiku
    words = []

    # Asks the user to enter a word about which he would like to see a haiku
    search_word_0 = (input("What would you like to see a Haiku about? ")).lower().strip()
    print()

    ## 1st word ##
    if len(words) == 0:
        rel_trg(search_word_0, 3)

    ## 2nd word ##
    if len(words) == 1:
        left_context(words[0], 2)

    ## 3rd word ##
    if len(words) == 2:
        left_context(words[1], 3)

    ## 4th word ##
    if len(words) == 3:
        left_context(words[2], 2)

    ## 5th word ##
    if len(words) == 4:
        rhyming_word(words[3], words[1], 2)

    ## 6th word ##
    if len(words) == 5:
        left_context(words[4], 3)

    ## 7th word ##
    if len(words) == 6:
        rhyming_word(words[5], words[4], 2)

    ##  Output ##  
    # If the searches for all seven words are successfull, prints the output
    if len(words) == 7:
        print(words[0], words[1])
        print(words[2], words[3], words[4])
        print(words[5], words[6])

    # Asks if user wants to see another Haiku
    print()
    repeat = input("Would you like to see another Haiku (yes/no)?")
